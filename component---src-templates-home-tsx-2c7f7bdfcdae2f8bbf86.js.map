{"version":3,"sources":["webpack:///./src/templates/fullpage.tsx","webpack:///./src/templates/home.tsx","webpack:///./src/components/contentUtils.ts","webpack:///./src/components/api/codeexample.tsx","webpack:///./src/components/api/content.tsx","webpack:///./src/components/togglebtn.tsx","webpack:///./src/components/plangbar.tsx"],"names":["FullPage","props","react_default","a","createElement","Fragment","global","curSection","section","pLangBar","plangbar","className","children","__webpack_require__","d","__webpack_exports__","query","HomePage","post","data","markdownRemark","fullpage_FullPage","HeaderSection","Home","content","rawHtml","html","DataTypes","ExampleType","DOCUMENT","document","createDocument","PRISM_LANGS","_PRISM_LANGS","PLang","JS","Prism","languages","js","Python","python","resetCanvas","canvas","el","duration","eventQ","remove","cancelall","startall","size","getBoundingClientRect","width","svgattr","CodeExample","canvasElement","render","_PLang$JS$PLang$Pytho","_this2","this","prismPLangId","pLang","formattedCode","highlight","code","jsCode","Babel","presets","jsCodeFunction","Function","dangerouslySetInnerHTML","__html","style","height","ref","algorithmx","onClick","event","target","currentTarget","classList","add","setTimeout","React","Component","CodeExampleConnected","connect","state","ApiContent","htmlStr","element","htmlData","innerHTML","Array","from","reduce","result","tagName","toLocaleLowerCase","parsed","getAttribute","JSON","parse","textContent","yamlParser","concat","length","outerHTML","prev","slice","map","i","type","AlgxExample","Object","assign","key","ToggleBtn","PLangBarBtn","curPLang","dispatchChangePLang","togglebtn_ToggleBtn","icon","text","PLangBarConnected","mapChangePLangToProps","plangbar_PLangBarBtn"],"mappings":"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","file":"component---src-templates-home-tsx-2c7f7bdfcdae2f8bbf86.js","sourcesContent":["import React from 'react'\n\nimport { GlobalHeader } from './global'\nimport { HeaderSection } from '../components/header'\nimport { PLangBarConnected } from '../components/plangbar'\nimport './fullpage.scss'\nimport '../components/page.scss'\n\ninterface FullPageProps extends React.Props<unknown> {\n  readonly section: HeaderSection\n  readonly pLangBar: boolean\n}\n\nexport const FullPage: React.FC<FullPageProps> = props => {\n  return <>\n    <GlobalHeader curSection={props.section}>\n      {props.pLangBar ? <PLangBarConnected/> : <></>}\n    </GlobalHeader>\n    <div className='full-page-container'>\n      <div className='full-page'>\n        {props.children}\n      </div>\n    </div>\n  </>\n}\n","import React from 'react'\n\nimport { FullPage } from './fullpage'\nimport { NodeProps, MarkdownNode } from './utils'\nimport { HeaderSection } from '../components/header'\nimport { ApiContent } from '../components/api/content'\nimport { graphql } from 'gatsby'\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n    }\n  }\n`\n\ntype HomePageProps = NodeProps<'markdownRemark', MarkdownNode<{}>>\n\nconst HomePage: React.FC<HomePageProps> = props => {\n  const post = props.data.markdownRemark\n  return (\n    <FullPage section={HeaderSection.Home} pLangBar={true}>\n      <ApiContent rawHtml={post.html}/>\n    </FullPage>\n  )\n}\nexport default HomePage\n","import * as yamlParser from 'js-yaml'\nimport { createDocument } from 'domino'\n\nconst DATA_TAG = 'data'\n\nenum DataTypes {\n  JSON = 'json',\n  YAML = 'yaml'\n}\n\nexport interface DataTag {\n  readonly type: string\n}\n\nconst DOCUMENT = typeof document === 'undefined' ? createDocument() : document\n\nexport const extractJsonFromHtml = (htmlStr: string): ReadonlyArray<string | object> => {\n  const element = DOCUMENT.createElement('div')\n  /* tslint:disable */\n  element.innerHTML = htmlStr\n  /* tslint:enable */\n\n  return Array.from(element.children).reduce((result: ReadonlyArray<string | object>, el) => {\n    if (el.tagName.toLocaleLowerCase() === DATA_TAG) {\n      const dataType = el.getAttribute('type') as DataTypes\n      const parsed = dataType === DataTypes.JSON ? JSON.parse(el.textContent!) : yamlParser.load(el.textContent!)\n      return result.concat([parsed])\n    } else if (result.length === 0) {\n      return [el.outerHTML]\n    } else {\n      const prev = result[result.length - 1]\n      return typeof prev === 'string' ? result.slice(0, -1).concat([prev + el.outerHTML])\n        : result.concat([el.outerHTML])\n    }\n  }, [])\n}\n","import './declarations'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport Prism from 'prismjs'\nimport * as Babel from '@babel/standalone'\nimport * as algorithmx from 'algorithmx'\n\nimport { RootState } from '../../state/state'\nimport { PLang } from '../../state/plang'\nimport './codeexample.scss'\n\nexport enum ExampleType {\n  AlgxExample = 'algorithmx-example'\n}\nexport interface ExampleData {\n  readonly type: ExampleType.AlgxExample\n  readonly code: { readonly [k in PLang]: string }\n}\n\nexport interface CodeExampleStateProps {\n  readonly pLang: PLang\n}\n\nconst PRISM_LANGS: { readonly [k in PLang]: Prism.Grammar } = {\n  [PLang.JS]: Prism.languages.js,\n  [PLang.Python]: Prism.languages.python\n}\n\nconst resetCanvas = (canvas: algorithmx.CanvasSelection, el: Element) => {\n  canvas.duration(0).eventQ(null).remove().cancelall().startall()\n  /* tslint:disable */\n  const size: [number, number] = [el.getBoundingClientRect().width, 200]\n  /* tslint:enable */\n  canvas.duration(0).svgattr('width', '100%').size(size)\n}\n\nclass CodeExample extends React.Component<CodeExampleStateProps & ExampleData> {\n  /* tslint:disable */\n  private canvas: algorithmx.CanvasSelection | null = null\n  private canvasElement: Element | null = null\n  /* tslint:enable */\n\n  public render (): JSX.Element {\n    const props = this.props\n    const prismPLangId = {\n      [PLang.JS]: 'js',\n      [PLang.Python]: 'python'\n    }[props.pLang]\n    const formattedCode = Prism.highlight(props.code[props.pLang], PRISM_LANGS[props.pLang], prismPLangId)\n\n    const jsCode = Babel.transform(props.code[PLang.JS], { presets: ['es2015'] }).code\n    const jsCodeFunction = new Function('canvas', jsCode)\n\n    return (\n      <div className='code-example'>\n        <pre className='code-example-code'>\n          <code>\n            <span className='code-example-code-text' dangerouslySetInnerHTML={{ __html: formattedCode }}/>\n          </code>\n        </pre>\n        <div className='code-example-output' style={{ height: '200px' }} ref={el => {\n          if (el !== null) {\n            /* tslint:disable */\n            this.canvasElement = el\n            if (!this.canvas) this.canvas = algorithmx.canvas(this.canvasElement)\n            /* tslint:enable */\n            const canvas = this.canvas\n            const canvasElement = this.canvasElement\n\n            resetCanvas(canvas, canvasElement)\n            jsCodeFunction(canvas)\n          }\n        }}/>\n        <div className='code-example-bar'>\n          <div className='code-example-btn' onClick={event => {\n            const canvas = this.canvas\n            const canvasElement = this.canvasElement\n\n            if (canvas && canvasElement) {\n              resetCanvas(canvas, canvasElement)\n              jsCodeFunction(canvas)\n\n              const target = event.currentTarget\n              target.classList.add('code-example-btn-rotate')\n              setTimeout(() => target.classList.remove('code-example-btn-rotate'), 500)\n            }\n          }}>\n          <span className='fas fa-sync-alt'/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: RootState): CodeExampleStateProps => {\n  return {\n    pLang: state.pLang\n  }\n}\n\nexport const CodeExampleConnected = connect<CodeExampleStateProps, {}, {}, RootState>(\n  state => ({ pLang: state.pLang })\n)(CodeExample)\n","import React from 'react'\n\nimport { extractJsonFromHtml } from '../contentUtils'\nimport { ExampleType, ExampleData, CodeExampleConnected } from './codeexample'\nimport './page.scss'\n\nexport const ApiContent: React.FC<{ readonly rawHtml: string }> = props => {\n  const htmlData = extractJsonFromHtml(props.rawHtml)\n  return <>\n    {htmlData.map((d, i) => {\n      if (typeof d === 'object' && (d as ExampleData).type === ExampleType.AlgxExample) {\n        return <CodeExampleConnected key={i} {...d as ExampleData}/>\n      } else if (typeof d === 'string') {\n        return <div key={i} dangerouslySetInnerHTML={{__html: d }}/>\n      }\n    })}\n  </>\n}\n","import React from 'react'\n\nimport './togglebtn.scss'\n\nexport const ToggleBtn: React.FC = () => (\n  <div className='toggle-btn'>\n    <svg className='toggle-btn-svg'>\n      <circle className='toggle-btn-circle'/>\n      <circle className='toggle-btn-overlay'/>\n    </svg>\n  </div>\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Action, Dispatch, AnyAction, Reducer } from 'redux'\n\nimport { PLang, PLangName, ChangePLangProps, mapChangePLangToProps } from '../state/plang'\nimport { ToggleBtn } from './togglebtn'\nimport { RootState } from '../state/state'\nimport './plangbar.scss'\n\ninterface PLangBarStateProps {\n  readonly curPLang: PLang\n}\ntype PLangBarProps = PLangBarStateProps & ChangePLangProps\n\ninterface LanguageBarBtnProps {\n  readonly text: string\n  readonly pLang: PLang\n  readonly icon: string\n}\n\nconst PLangBarBtn: React.FC<LanguageBarBtnProps & PLangBarProps> = props => (\n  <div className={`language-bar-btn ${props.curPLang === props.pLang ? 'language-bar-btn-cur' : ''}`}\n    onClick={() => props.dispatchChangePLang(props.pLang)}>\n\n    <ToggleBtn/>\n    <span className={`${props.icon} language-bar-btn-icon`}/>\n    <span className='language-bar-btn-text'>{props.text}</span>\n  </div>\n)\n\nconst PLangBar: React.FC<PLangBarProps> = props => (\n  <div className='language-bar'>\n    <div className='language-bar-btn-container'>\n      <PLangBarBtn {...props} text='JavaScript' pLang={PLang.JS} icon='fab fa-js'/>\n      <PLangBarBtn {...props} text='Python' pLang={PLang.Python} icon='fab fa-python'/>\n    </div>\n  </div>\n)\n\nexport const PLangBarConnected = connect<PLangBarStateProps, ChangePLangProps, {}, RootState>(\n  state => ({ curPLang: state.pLang }),\n  mapChangePLangToProps\n)(PLangBar)\n"],"sourceRoot":""}